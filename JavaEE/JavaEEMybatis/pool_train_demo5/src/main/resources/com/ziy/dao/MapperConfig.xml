<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ziy.dao.IUserDao">
    <!--查询所有-->
    <select id="findAll" resultType="user">
        select * from person

    </select>
    <!-- 根据传入id值动态查询 -->
    <select id="findByList" resultType="user">
        select * from person
        where id in
        <foreach collection="li" item="item" index="i" separator="," open="(" close=")">
            #{item}
        </foreach>
    </select>
    <!-- if标签 -->
    <select id="findByUser" resultType="user">
<!--        select * from person-->
<!--        where 1=1-->
<!--        <if test="username != null and username != ''">-->
<!--            and username like concat('%', #{username}, '%')-->
<!--        </if>-->

            select * from person
            <where>
                <if test="_parameter.username != null and _parameter.username != ''">
                    username like concat('%', #{username}, '%')
                </if>
<!--                <if test="true">-->
<!--                    and address like concat('%', #{address}, '%')-->
<!--                </if>-->
            </where>
<!--            select * from person-->
<!--            <trim prefix="WHERE" prefixOverrides="AND |OR ">-->
<!--                <if test="username != null and username != ''">-->
<!--                    username like concat('%', #{username}, '%')-->
<!--                </if>-->
<!--                <if test="true">-->
<!--                    and address like concat('%', #{address}, '%')-->
<!--                </if>-->
<!--            </trim>-->
    </select>





    <select id="findByVo" parameterType="com.ziy.querycondition.QueryVo" resultType="user">
        <!--
        这里使用了OGNL表达式 -> user.username
        含义：parameterType指定类中的user属性对象的username属性
        -->
        select * from person
        <if test=""></if>

    </select>

    <!--保存用户信息-->
    <insert id="saveUser">
        insert into person(username, userpassword, address) values (#{username}, #{userpassword}, #{address});
        <!--
        keyProperty -> 映射类的属性
        keyColumn -> 数据库表中数据的列名
         -->
        <selectKey keyProperty="id" keyColumn="id" resultType="int" order="AFTER">
            select last_insert_id()
        </selectKey>
    </insert>

    <!--更新用户信息-->
    <update id="update" parameterType="user">
        update person set username=#{username}, userpassword=#{userpassword}
    </update>

    <delete id="delete" parameterType="java.lang.Integer">
        <!--这里的uid只是一个占位符-->
        delete from person where id = #{uid}
    </delete>

    <!-- 根据id查询 -->
    <select id="findById" parameterType="int" resultType="user">
        select * from person where id=#{uid}
    </select>

    <!-- 根据用户名模糊查询 -->
    <select id="findByName" parameterType="String" resultType="User">
        <!--select * from person where username like #{name}-->
        select * from person where username like '%${value}%'
    </select>

    <select id="findTotal" resultType="int">
        select count(id) from person
    </select>
</mapper>